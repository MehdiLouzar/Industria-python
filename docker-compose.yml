# docker-compose.yml - Version avec démarrage séquentiel
services:
  # Étape 1: Base de données seule
  db:
    build:
      context: .
      dockerfile: Dockerfile-db
    image: postgis/postgis:14-3.3
    container_name: industria-database
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: industria
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d industria"]
      interval: 3s
      timeout: 3s
      retries: 20
      start_period: 10s

  # Étape 2: Keycloak (dépend de DB)
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: start-dev
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/realms/master || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 30s

  # Étape 3: Bootstrap Keycloak (dépend de Keycloak)
  keycloak_bootstrap:
    build:
      context: .
      dockerfile: Dockerfile.bootstrap
    depends_on:
      keycloak:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/industria
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: master
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: python scripts/bootstrap_keycloak.py

  # Étape 4: Application Flask (dépend de tout)
  flask_app:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      keycloak_bootstrap:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/industria
      KEYCLOAK_ISSUER: http://keycloak:8080/realms/master
      KEYCLOAK_AUDIENCE: industria
      KEYCLOAK_CLIENT_ID: industria
      MAPBOX_TOKEN: your_mapbox_token
    restart: on-failure
    # Utiliser le script d'attente en plus des depends_on
    command: ["./scripts/wait-for-db.sh", "db", "5432", "python", "run.py"]

volumes:
  pgdata: